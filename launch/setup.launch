<launch>

  <node name="rsdk_robot_enable" pkg="baxter_tools" type="enable_robot.py" args="-e" />

  <node name="left_camera_close" pkg="baxter_tools" type="camera_control.py" args="-c left_hand_camera" />

  <node name="right_camera_close" pkg="baxter_tools" type="camera_control.py" args="-c right_hand_camera" />

  <node name="left_camera_open" pkg="baxter_tools" type="camera_control.py" args="-o left_hand_camera" />

  <node name="right_camera_open" pkg="baxter_tools" type="camera_control.py" args="-o right_hand_camera" />

  <arg name="marker_size" default="5.6" />
  <arg name="max_new_marker_error" default="0.08" />
  <arg name="max_track_error" default="0.2" />
  <arg name="cam_image_topic" default="/cameras/right_hand_camera/image" />
  <arg name="cam_info_topic" default="/cameras/right_hand_camera/camera_info" />
  <arg name="output_frame" default="/right_hand_camera_axis" />

  <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame)" />

  <node name="joint_trajectory_action_server" pkg="baxter_interface" type="joint_trajectory_action_server.py" />



  <include file="$(find baxter_moveit_config)/launch/planning_context.launch" />

  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <arg name="info" default="$(arg debug)" />  
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <include ns="move_group" file="$(find baxter_moveit_config)/launch/planning_pipeline.launch">
    <arg name="pipeline" value="ompl" />
  </include>

  <include ns="move_group" file="$(find baxter_moveit_config)/launch/trajectory_execution.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_controller_manager" value="baxter" /> 
    <arg name="moveit_manage_controllers" value="true" />
  </include>
  
  <arg name="kinect" default="false" />
  <include ns="move_group" file="$(find baxter_moveit_config)/launch/sensor_manager.launch" if="$(arg allow_trajectory_execution)">
    <arg name="kinect" value="$(arg kinect)" />
    <arg name="moveit_sensor_manager" value="baxter" /> 
  </include>

  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="joint_states:=/robot/joint_states $(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				      move_group/MoveGroupExecuteService
				      move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupPickPlaceAction
				      move_group/MoveGroupPlanService
				      move_group/MoveGroupQueryPlannersService
				      move_group/MoveGroupStateValidationService
				      move_group/MoveGroupGetPlanningSceneService
				      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>
  


<node name="image_view_cv" pkg="image_view" type="image_view" respawn="false" output="screen">
  <remap from="image" to="/processed_image"/>
  <param name="autosize" value="true" />
</node>

<node name="object_tracker" pkg="connect4" type="object_tracker_click.py" respawn="false" output="screen" />

<node name="rviz" pkg="rviz" type="rviz" args="rviz" />

<node name="tf_sub" pkg="connect4" type="tf_sub.py" />

</launch>

